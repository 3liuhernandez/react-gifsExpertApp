{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFetchGifs","property","content","name","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oMAsCeA,EAnCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAG3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SArBc,SAAEP,GAExBF,EAAeE,EAAEQ,OAAOF,a,QCPnBG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACrC,OACI,sBAAKC,UAAU,2CAAf,UACI,qBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,4BAAKA,Q,wBCJJK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,iDACoCO,UAAWF,GAD/C,+DAEAG,MAAOR,GAFP,cAEbS,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QATvB,kBAaZY,GAbY,4CAAH,sD,iBCIPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAEtB,ECDwB,SAAEA,GAC1B,MAA0BrB,mBAAS,CAC/B2B,KAAM,GACNO,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdAC,qBAAU,WAENjB,EAASC,GACJiB,MAAM,SAAAV,GACHW,YAAW,WACPH,EAAS,CACLT,KAAMC,EACNM,SAAS,MAEd,UAGZ,CAACb,IAEGc,EDnBwBK,CAAcnB,GAAhCO,EAAb,EAAQD,KAAWO,EAAnB,EAAmBA,QAEnB,OACI,qCACI,sBAAKjB,UAAU,UAAf,UACA,eAAC,IAAD,WACA,2CACA,sBAAMwB,SAAS,SAASC,QAAQ,yDAChC,sBAAMC,KAAK,cAAcD,QAAQ,sBACjC,sBAAMD,SAAS,WAAWC,QAAQ,UAClC,sBAAMD,SAAS,WAAWC,QAAQ,yBAElC,qBAAKzB,UAAU,UAAf,+BAGA,qBAAIA,UAAU,wCAAd,cAAyDI,EAAzD,OACA,qBAAKH,IAAI,sBAEPgB,GAAW,mBAAGjB,UAAU,qDAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEQW,EAAKC,KAAK,SAACC,GAAD,OACN,cAAC,EAAD,eAAiCA,GAAdA,EAAIhB,aEIhC8B,EA/BM,WAEjB,MAAoC5C,mBAAS,CAAC,cAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAQA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAGA,6BAEQ8C,EAAWhB,KAAK,SAAAR,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAaA,GADLA,Y,MClBpCyB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2206d57d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ( {setCategories} ) => {\r\n    \r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) => {\r\n        /* console.log( e.target.value ); */\r\n        setinputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if( inputValue.trim().length > 2 ) {\r\n\r\n            /* console.log(setCategories); */\r\n            setCategories( cats => [ inputValue, ...cats ] );\r\n            setinputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit = { handleSubmit }>  \r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__bounceIn\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}","\r\n\r\nexport const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=kryDwjqhKwUh4bCKs7IBOL1XIY69kmeH`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return gifs;\r\n}","import { GifGridItem } from \"./GifGridItem\"; \r\n\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\nimport MetaTags from 'react-meta-tags';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:gifs, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <div className=\"wrapper\">\r\n            <MetaTags>\r\n            <title>Page 1</title>\r\n            <meta property=\"og:url\" content=\"https://3liuhernandez.github.io/react-gifsExpertApp/\" />\r\n            <meta name=\"description\" content=\"Some description.\" />\r\n            <meta property=\"og:title\" content=\"MyApp\" />\r\n            <meta property=\"og:image\" content=\"images/balanz.jpg\" />\r\n            </MetaTags>\r\n            <div className=\"content\"> Some Content </div>\r\n            </div>\r\n\r\n            <h3 className=\"animate__animated animate__backInLeft\"> { category } </h3>\r\n            <img src=\"images/balanz.jpg\" />\r\n\r\n            { loading && <p className=\"animate__animated animate__flash animate__infinite\">Loading</p>}\r\n\r\n            <div className='card-grid'>\r\n                {\r\n                    gifs.map( (img) => (\r\n                        <GifGridItem key={ img.id } { ...img } />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\n\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        \r\n        getGifs( category )\r\n            .then( gifs => {\r\n                setTimeout(() => {\r\n                    setState({\r\n                        data: gifs,\r\n                        loading: false\r\n                    })\r\n                }, 2000);\r\n            })\r\n\r\n    }, [category])\r\n\r\n    return state;\r\n}\r\n","import { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n    /* console.log(categories); */\r\n\r\n    /* const handleAdd = () => {\r\n        // setCategories( ['Marvel', ...categories] );\r\n        setCategories( cats => [ ...cats, 'Marvel'] );\r\n    } */\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = { setCategories } />\r\n            <hr />\r\n            {/* <button onClick = { handleAdd }>Agregar</button> */}\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key = { category }\r\n                            category = { category }\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport GifExpertApp from './GifExpertApp';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <GifExpertApp />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}